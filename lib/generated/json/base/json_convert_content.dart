// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:edxera/My_cources/Models/course_data_entity.dart';
import 'package:edxera/batchs/Models/announcements_entity.dart';
import 'package:edxera/profile/Models/payment_details_entity.dart';
import 'package:edxera/profile/Models/privacypolicy_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);

extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value, {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(value as Map<String, dynamic>) as T;
      } else {
        throw UnimplementedError('$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    // if (<CourseDataEntity>[] is M) {
    //   return data.map<CourseDataEntity>((Map<String, dynamic> e) => CourseDataEntity.fromJson(e)).toList() as M;
    // }
    // if (<CourseDataData>[] is M) {
    //   return data.map<CourseDataData>((Map<String, dynamic> e) => CourseDataData.fromJson(e)).toList() as M;
    // }
    // if (<CourseDataDataCourse>[] is M) {
    //   return data.map<CourseDataDataCourse>((Map<String, dynamic> e) => CourseDataDataCourse.fromJson(e)).toList() as M;
    // }
    // if (<CourseDataDataCourseImage>[] is M) {
    //   return data.map<CourseDataDataCourseImage>((Map<String, dynamic> e) => CourseDataDataCourseImage.fromJson(e)).toList() as M;
    // }
    // if (<CourseDataDataCourseMetaImage>[] is M) {
    //   return data.map<CourseDataDataCourseMetaImage>((Map<String, dynamic> e) => CourseDataDataCourseMetaImage.fromJson(e)).toList() as M;
    // }
    // if (<CourseDataDataCourseLanguage>[] is M) {
    //   return data.map<CourseDataDataCourseLanguage>((Map<String, dynamic> e) => CourseDataDataCourseLanguage.fromJson(e)).toList() as M;
    // }
    // if (<CourseDataDataCourseLevel>[] is M) {
    //   return data.map<CourseDataDataCourseLevel>((Map<String, dynamic> e) => CourseDataDataCourseLevel.fromJson(e)).toList() as M;
    // }
    // if (<CourseDataDataSkills>[] is M) {
    //   return data.map<CourseDataDataSkills>((Map<String, dynamic> e) => CourseDataDataSkills.fromJson(e)).toList() as M;
    // }
    // if (<CourseDataDataInstructors>[] is M) {
    //   return data.map<CourseDataDataInstructors>((Map<String, dynamic> e) => CourseDataDataInstructors.fromJson(e)).toList() as M;
    // }
    // if (<CourseDataDataInstructorsSocialLinks>[] is M) {
    //   return data.map<CourseDataDataInstructorsSocialLinks>((Map<String, dynamic> e) => CourseDataDataInstructorsSocialLinks.fromJson(e)).toList()
    //       as M;
    // }
    // if (<CourseDataDataInstructorsUser>[] is M) {
    //   return data.map<CourseDataDataInstructorsUser>((Map<String, dynamic> e) => CourseDataDataInstructorsUser.fromJson(e)).toList() as M;
    // }
    // if (<CourseDataDataSylabus>[] is M) {
    //   return data.map<CourseDataDataSylabus>((Map<String, dynamic> e) => CourseDataDataSylabus.fromJson(e)).toList() as M;
    // }
    if (<AnnouncementsEntity>[] is M) {
      return data.map<AnnouncementsEntity>((Map<String, dynamic> e) => AnnouncementsEntity.fromJson(e)).toList() as M;
    }
    if (<AnnouncementsData>[] is M) {
      return data.map<AnnouncementsData>((Map<String, dynamic> e) => AnnouncementsData.fromJson(e)).toList() as M;
    }
    if (<AnnouncementsDataBatchAnnouncements>[] is M) {
      return data.map<AnnouncementsDataBatchAnnouncements>((Map<String, dynamic> e) => AnnouncementsDataBatchAnnouncements.fromJson(e)).toList() as M;
    }
    if (<PaymentDetailsEntity>[] is M) {
      return data.map<PaymentDetailsEntity>((Map<String, dynamic> e) => PaymentDetailsEntity.fromJson(e)).toList() as M;
    }
    if (<PaymentDetailsData>[] is M) {
      return data.map<PaymentDetailsData>((Map<String, dynamic> e) => PaymentDetailsData.fromJson(e)).toList() as M;
    }
    if (<PaymentDetailsDataFee>[] is M) {
      return data.map<PaymentDetailsDataFee>((Map<String, dynamic> e) => PaymentDetailsDataFee.fromJson(e)).toList() as M;
    }
    if (<PrivacypolicyEntity>[] is M) {
      return data.map<PrivacypolicyEntity>((Map<String, dynamic> e) => PrivacypolicyEntity.fromJson(e)).toList() as M;
    }
    if (<PrivacypolicyData>[] is M) {
      return data.map<PrivacypolicyData>((Map<String, dynamic> e) => PrivacypolicyData.fromJson(e)).toList() as M;
    }
    if (<PrivacypolicyDataPrivacyPolicyPage>[] is M) {
      return data.map<PrivacypolicyDataPrivacyPolicyPage>((Map<String, dynamic> e) => PrivacypolicyDataPrivacyPolicyPage.fromJson(e)).toList() as M;
    }
    if (<PrivacypolicyDataTermsAndConditionsPage>[] is M) {
      return data
          .map<PrivacypolicyDataTermsAndConditionsPage>((Map<String, dynamic> e) => PrivacypolicyDataTermsAndConditionsPage.fromJson(e))
          .toList() as M;
    }
    if (<PrivacypolicyDataSupportPage>[] is M) {
      return data.map<PrivacypolicyDataSupportPage>((Map<String, dynamic> e) => PrivacypolicyDataSupportPage.fromJson(e)).toList() as M;
    }
    if (<PrivacypolicyDataAboutUsPage>[] is M) {
      return data.map<PrivacypolicyDataAboutUsPage>((Map<String, dynamic> e) => PrivacypolicyDataAboutUsPage.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    // (CourseDataEntity).toString(): CourseDataEntity.fromJson,
    // (CourseDataData).toString(): CourseDataData.fromJson,
    // (CourseDataDataCourse).toString(): CourseDataDataCourse.fromJson,
    // (CourseDataDataCourseImage).toString(): CourseDataDataCourseImage.fromJson,
    // (CourseDataDataCourseMetaImage).toString(): CourseDataDataCourseMetaImage
    //     .fromJson,
    // (CourseDataDataCourseLanguage).toString(): CourseDataDataCourseLanguage
    //     .fromJson,
    // (CourseDataDataCourseLevel).toString(): CourseDataDataCourseLevel.fromJson,
    // (CourseDataDataSkills).toString(): CourseDataDataSkills.fromJson,
    // (CourseDataDataInstructors).toString(): CourseDataDataInstructors.fromJson,
    // (CourseDataDataInstructorsSocialLinks)
    //     .toString(): CourseDataDataInstructorsSocialLinks.fromJson,
    // (CourseDataDataInstructorsUser).toString(): CourseDataDataInstructorsUser
    //     .fromJson,
    // (CourseDataDataSylabus).toString(): CourseDataDataSylabus.fromJson,
    (AnnouncementsEntity).toString(): AnnouncementsEntity.fromJson,
    (AnnouncementsData).toString(): AnnouncementsData.fromJson,
    (AnnouncementsDataBatchAnnouncements).toString(): AnnouncementsDataBatchAnnouncements.fromJson,
    (PaymentDetailsEntity).toString(): PaymentDetailsEntity.fromJson,
    (PaymentDetailsData).toString(): PaymentDetailsData.fromJson,
    (PaymentDetailsDataFee).toString(): PaymentDetailsDataFee.fromJson,
    (PrivacypolicyEntity).toString(): PrivacypolicyEntity.fromJson,
    (PrivacypolicyData).toString(): PrivacypolicyData.fromJson,
    (PrivacypolicyDataPrivacyPolicyPage).toString(): PrivacypolicyDataPrivacyPolicyPage.fromJson,
    (PrivacypolicyDataTermsAndConditionsPage).toString(): PrivacypolicyDataTermsAndConditionsPage.fromJson,
    (PrivacypolicyDataSupportPage).toString(): PrivacypolicyDataSupportPage.fromJson,
    (PrivacypolicyDataAboutUsPage).toString(): PrivacypolicyDataAboutUsPage.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}
